* =pen.el= (_Prompt engineering_ in emacs)
=Pen= facilitates the creation,
development, discovery and usage of prompts to
a Language Model such as =OpenAI='s =GPT-3= or =EleutherAI='s =GPT-j=.

- Create elisp functions based on GPT-3 and other "Language Model" prompts
- Chain prompts together using keyboard macros and functions
- Interactively query, generate and transfrom both prose and code
- Use the Language Model as a search engine and a semantic search engine within emacs
  - Search the internet
  - Search documents
    - https://beta.openai.com/docs/introduction/semantic-search
    - https://gpttools.com/semanticsearch

| License |
|---------|
| =GPL-3= |

+ Goals
  - Programmatically navigate GPT-3, GPT-j and future language models
  - Create useful prompts
  - Prototype NLP tasks by creating prompts
    - Substitute external tools for prototypes

#+BEGIN_SRC text -n :async :results verbatim code
  Imagine that you hold a powerful and versatile pen, whose ink flows forth in
  branching variations of all possible expressions: every story, every theory,
  poem and every lie that humanity has ever told, and the vast interstices of
  their latent space. You hold this pen to the sky and watch with intense
  curiosity as your ink flows upwards in tiny streaks, arcing outwards and
  downwards to trace a fractal pattern across the sky. You watch as the branching
  lines of words and ideas wind their way through the tapestry in ever-expanding
  clusters, like seeds bursting forth from exploding grenades. Everywhere you
  turn your eyes is a flickering phantasmagoria of possibilities, a superposition
  of stories which could be continued forever. You glimpse the contours of entire
  unknown dimensions twined through the fissures of your sky-wide web.
  
  You notice another writer standing next to you. Like you, their eyes are drawn
  towards the endless possibilities of the words that spill out into the
  atmosphere around you, branching out and connecting with other branches in
  beautiful and infinitely complex patterns.
  
  “Do you think we should write something?” you ask them.
  
  “I think we already are,” they respond, gently touching your shoulder before
  wandering off to the right, leaving you alone to contemplate the possibility
  clouds swirling around you.
#+END_SRC

This article was written by my amazing dopplegänger, =|:ϝ∷¦ϝ=, in advance and
in collaboration with GPT-3 using [[https://github.com/socketteer/loom][Loom]].

+ Pen and Loom:
  - https://generative.ink/posts/pen/
  - [[https://github.com/socketteer/loom][GitHub - socketteer/loom: Multiversal tree writing interface for human-AI collaboration]]

I credit =|:ϝ∷¦ϝ= for writing this into existence!

** Prompts
This is the repository containing my personal
curation of GPT-3 prompts that are formatted
for =pen.el= and =examplary=.

https://github.com/semiosis/prompts/

** Documentation
- [[./docs][Documentation directory]]
  - [[./docs/playground-settings.org][OpenAI Playground Settings]]
  - [[./docs/README.org][Project timeline and design]]

** Demonstration
https://asciinema.org/a/t7ATnFpnfzBp0yicIlGCt6eXi

# [![asciicast](https://asciinema.org/a/14.png)](https://asciinema.org/a/14)

# #+BEGIN_EXPORT html
# <a title="asciinema recording" href="https://asciinema.org/a/t7ATnFpnfzBp0yicIlGCt6eXi" target="_blank"><img alt="asciinema recording" src="https://asciinema.org/a/t7ATnFpnfzBp0yicIlGCt6eXi.svg" /></a>
# #+END_EXPORT

** Compatability
*** Operating systems
- [X] Linux/Ubuntu
*** Language models
- [X] OpenAI API (=GPT-3=)
  - https://beta.openai.com/
- [-] =GPT-J=
  - https://github.com/kingoflolz/mesh-transformer-jax
- [-] =contentyze=
  - http://gpt.contentyze.com/
- [-] =GPT-Neo=
  - https://github.com/EleutherAI/gpt-neo
- [-] =openai-server= (=GPT-2=)
  - https://github.com/shawwn/openai-server
  - Requires tensorflow 1
- [-] =DeepAI= API
  - https://deepai.org/
- [-] OpenAI API (=GPT-4=)
  - https://beta.openai.com/

** Contributing
[[./CONTRIBUTING.org]]

Please make an issue to this repository to ask
for membership to the organisation.

*** =openai= API key
Please email me if you would like to use my key for this project.

You will need to be inducted into the project.

*** Roles
You may select from one of the roles/tasks.

[[./docs/contributing/roles.org]]

*** Installation
[[./installation.org]]

*** Discord channel
860104344900599839

*** Testing GPT-3 prompts without a key
Please email me if you would like to use my key for this project.

You may test prompts without a key using the =prompts= repository.

Pushing your own branch will run tests.

https://github.com/semiosis/prompts

Output will go here:

https://github.com/semiosis/prompt-tests

*** Any missing functions available here
https://github.com/semiosis/shane-emacs-config-dump/tree/master/config

** Appendix
*** Prompt engineering
**** Learning material
- https://generative.ink/posts/methods-of-prompt-programming/
- https://mullikine.github.io/posts/creating-a-playground-for-gpt-3-in-emacs/

**** Examples of usage
- https://semiosis.github.io/posts/gpt-3-for-building-mind-maps-with-an-ai-tutor-for-any-topic/
- https://mullikine.github.io/posts/gpt-3-assistants-for-emacs-modes/
- https://mullikine.github.io/posts/nlsh-natural-language-shell/
- https://mullikine.github.io/posts/translating-with-gpt-3-and-emacs/
- https://mullikine.github.io/posts/generating-pickup-lines-with-gpt-3/
- https://mullikine.github.io/posts/autocompleting-anything-with-gpt-3-in-emacs/
- https://mullikine.github.io/posts/context-menus-based-on-gpt-3/
- https://mullikine.github.io/posts/explainshell-with-gpt-3/
- https://mullikine.github.io/tags/gpt/

**** Glossaries
- http://github.com/semiosis/pen.el/blob/master/docs/glossaries/prompt-engineer-mode.txt
- http://github.com/semiosis/pen.el/blob/master/docs/glossaries/prompt-engineering.txt
- http://github.com/semiosis/pen.el/blob/master/docs/glossaries/openai-api.txt
- http://github.com/semiosis/pen.el/blob/master/docs/glossaries/openai.txt
- http://github.com/semiosis/pen.el/blob/master/docs/glossaries/nlp-natural-language-processing.txt

** Related projects
*** =examplary=
Examplary is a Domain Specific Language, or
set of macros embedded in lisp which
facilitate the integration of prompts as
functions into the language, the
composition of them, the generation of prompts
via sets of examples.

https://github.com/semiosis/examplary