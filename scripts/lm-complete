#!/bin/sh

# Example of usage:
# export PEN_PROMPTS_DIR=$MYGIT/semiosis/prompts
# export PEN_PROMPT="Once upon a time"
# lm-complete

mkdir -p ~/.pen/results

test -n "$PEN_LM_COMMAND" || {
    echo "PEN_LM_COMMAND not supplied"
    exit 1
}

: "${PEN_MIN_TOKENS:="20"}"
: "${PEN_MAX_TOKENS:="60"}"
: "${PEN_ENGINE_MIN_TOKENS:="20"}"
: "${PEN_ENGINE_MAX_TOKENS:="60"}"
: "${PEN_TEMPERATURE:="0.8"}"
: "${PEN_TOP_P:="1"}"
: "${PEN_TOP_K:="10"}"
: "${PEN_PROMPT:="Once upon a time"}"
: "${PEN_N_COMPLETIONS:="1"}"
: "${PEN_END_POS:="$(printf -- "%s" "$PEN_PROMPT" | wc -c)"}"

export PEN_USER_AGENT=emacs/pen
export PEN_LM_KEY
export PEN_MIN_TOKENS
export PEN_MAX_TOKENS
export PEN_ENGINE_MIN_TOKENS
export PEN_ENGINE_MAX_TOKENS
export PEN_TEMPERATURE
export PEN_TOP_P
export PEN_TOP_K
export PEN_PROMPT
export PEN_FLAGS
export PEN_N_COMPLETIONS
export PEN_END_POS
# Each PEN_LM_COMMAND script may take a 'mode'. For example, summarization.
# Sometimes the mode must be specified because there may be multiple API interfaces.
# For pen-hf.py, the mode could be "summarize", but the mode shouldn't be confused with a task
export PEN_MODE

# This file expects the PEN_PROMPTS_DIR

# Update caches (would override PEN_CACHE)
if test "$UPDATE" = y; then
    PEN_CACHE=
fi

# It's already broken. Happens in sn
# printf -- "%s" "$PEN_PROMPT" | tv &>/dev/null

# if PEN_CACHE==y then pen.el has indicated this should be cached/memoised.
# This is handled by `pen-ci`
export PEN_CACHE

if ! test -s $HOME/.pen/aix_api_key; then
    PEN_LM_COMMAND=openai-complete.sh
fi

case "$PEN_LM_COMMAND" in
    ai21-complete.sh) {
        if ! test -s $HOME/.pen/ai21_api_key; then
            PEN_LM_COMMAND=openai-complete.sh
            export PEN_MODEL=davinci
        fi
    }
    ;;

    aix-complete.sh) {
        if ! test -s $HOME/.pen/aix_api_key; then
            PEN_LM_COMMAND=openai-complete.sh
            export PEN_MODEL=davinci
        fi
    }
    ;;

    openai-complete.sh) {
        if ! test -s $HOME/.pen/openai_api_key; then
            PEN_LM_COMMAND=aix-complete.sh
            export PEN_MODEL=GPT-J-6B
        fi
    }
    ;;
esac

case "$PEN_LM_COMMAND" in
    ai21-complete.sh) {
        :
    }
    ;;

    aix-complete.sh) {
        # It's too slow otherwise
        export PEN_N_COMPLETIONS=1
    }
    ;;

    hf-complete.sh) {
        # It's too slow otherwise

        if test "$PEN_MODE" = summarize; then
            # This is to ensure it's properly truncated
            export PEN_N_COMPLETIONS=1
        fi
    }
    ;;
esac

# pen-ci will possibly cache/memoize the command
pen-ci "$PEN_LM_COMMAND"