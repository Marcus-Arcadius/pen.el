#!/bin/sh

# Example of usage:
# export PEN_PROMPTS_DIR=$MYGIT/semiosis/prompts
# export PEN_PROMPT="Once upon a time"
# lm-complete

mkdir -p ~/.pen/results

test -n "$PEN_LM_COMMAND" || {
    echo "PEN_LM_COMMAND not supplied"
    exit 1
}

: "${PEN_MAX_TOKENS:="60"}"
: "${PEN_TEMPERATURE:="0.8"}"
: "${PEN_TOP_P:="1"}"
: "${PEN_PROMPT:="Once upon a time"}"
: "${PEN_N_COMPLETIONS:="1"}"
: "${PEN_END_POS:="$(printf -- "%s" "$PEN_PROMPT" | wc -c)"}"

export PEN_LM_KEY
export PEN_MAX_TOKENS
export PEN_TEMPERATURE
export PEN_TOP_P
export PEN_PROMPT
export PEN_N_COMPLETIONS
export PEN_END_POS

# This file expects the PEN_PROMPTS_DIR

# Update caches (would override PEN_CACHE)
if test "$UPDATE" = y; then
    PEN_CACHE=
fi

# It's already broken. Happens in sn
# printf -- "%s" "$PEN_PROMPT" | tv &>/dev/null

# if PEN_CACHE==y then pen.el has indicated this should be cached/memoised.
# This is handled by `pen-ci`
export PEN_CACHE

if  ! test -s $HOME/.pen/aix_api_key; then
    PEN_LM_COMMAND=openai-complete.sh
fi

case "$PEN_LM_COMMAND" in
    aix-complete.sh) {
        if  ! test -s $HOME/.pen/aix_api_key; then
            PEN_LM_COMMAND=openai-complete.sh
            export PEN_ENGINE=davinci
        fi
    }
    ;;

    openai-complete.sh) {
        if  ! test -s $HOME/.pen/openai_api_key; then
            PEN_LM_COMMAND=aix-complete.sh
            export PEN_ENGINE=GPT-J-6B
        fi
    }
    ;;
esac

# pen-ci will possibly cache/memoize the command
pen-ci "$PEN_LM_COMMAND"