#!/bin/bash
export TTY

# Remember that comint uses a 'dumb' terminal.
# TERM=dumb lfe
# Avoid using rlwrap inside comint as it messes with the user prompt

user_prompt_re="\\(In \\|Out\\)\\[[0-9]*\\]: "

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -hs) {
        load_hs="$2"
        shift
        shift
    }
    ;;

    -p) {
        if test -n "$2"; then
            user_prompt_re="$2"
        fi
        shift
        shift
    }
    ;;

    -E) {
        DO_EXEC=y
        shift
    }
    ;;

    *) break;
esac; done

if test "$DO_EXEC" = "y"; then
    CMD="$1"
else
    CMD="$(cmd-nice-posix "$@")"
fi

CMD="$(p "$CMD" | sed -e 's/^rlr /& notty /' -e 's/rlr notty notty/rlr notty/')"

if test -n "$load_hs"; then
    slug="$(echo "$CMD" | tr -d '\n' | slugify)"
    # hsqc -ao "$load_hs" | tac > "$NOTES/programs/comint/history/$slug"
fi

# sp -e "(comint-quick $(cmd-nice-posix "$CMD") $(cmd-nice-posix "$(pwd -P)") $(cmd-nice-posix "$user_prompt_re"))"

elisp="(comint-quick $(cmd-nice-posix "$CMD") user-home-directory $(cmd-nice-posix "$user_prompt_re"))"

# This is correct elisp now. So now pente must work fine
# pen-pl "$elisp" | pen-tv &>/dev/null

if test "$INERT_COMINT" = "y"; then
    printf -- "%s\n" "$elisp"
else
    pente "$elisp"
fi