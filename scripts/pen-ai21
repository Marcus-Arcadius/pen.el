#!/bin/bash

: "${AI21_API_KEY:="$PEN_LM_KEY"}"

if test -s $HOME/.pen/ai21_api_key; then
    : "${AI21_API_KEY:="$(cat $HOME/.pen/ai21_api_key)"}"
fi

test -n "$AI21_API_KEY" || {
    echo "AI21_API_KEY not given to script"
    exit 1
}

export AI21_API_KEY

export PEN_PROMPT
export PEN_MODEL
export PEN_MAX_TOKENS
export PEN_TEMPERATURE
export PEN_TOP_P
export PEN_TOP_K
export PEN_STOP_SEQUENCE
export PEN_N_COMPLETIONS

: "${PEN_N_COMPLETIONS:="4"}"

sedstop="$(printf -- "%s" "$PEN_STOP_SEQUENCE" | sed -z 's/\\/\\\\/g')"

# pen-ai21.py "$@" | sed -z "s~${PEN_STOP_SEQUENCE}.*~~"

# Interestingly, ai21 has this issue where the start of the response is stripped

pen_ai21() {
    if printf -- "%s\n" "$PEN_FLAGS" | grep -q -P '<ai21-begin-newline>'; then
        echo
    fi

    # cmd-nice-jq is very slow. Find a faster, reliable solution.
    # Or use python

    cmd curl "https://api.ai21.com/studio/v1/$PEN_MODEL/complete" \
         -H 'Content-Type: application/json' \
         -H "Authorization: Bearer $AI21_API_KEY" \
         -X POST \
         -d "{\"prompt\": $(cmd-nice-jq "$PEN_PROMPT"),
              \"numResults\": $PEN_N_COMPLETIONS,
              \"maxTokens\": $PEN_MAX_TOKENS,
              \"stopSequences\": [$(cmd-nice-jq "$PEN_STOP_SEQUENCE")],
              \"topKReturn\": $PEN_TOP_K,
              \"temperature\": $PEN_TEMPERATURE
             }" | tv
}

pen_ai21 "$@"
exit

# jq -r '.completions[3].data.text'

if test "$PEN_N_COMPLETIONS" = 1; then
    {
    printf -- "%s" "$PEN_PROMPT"
    pen_ai21 "$@" | sed -z "s~${sedstop}$~~"
    } | tee /tmp/ai21.txt
else
    for i in $(seq 1 "$PEN_N_COMPLETIONS"); do
        echo "===== Completion $i ====="
        # The openai api will add the prompt. So emulate it
        {
        printf -- "%s" "$PEN_PROMPT"
        pen_ai21 "$@" | sed -z "s~${sedstop}$~~"
        } | awk 1
    done | tee /tmp/ai21.txt
fi
