#!/bin/bash
export TTY

sn="$(basename "$0")"

inside-docker-p() {
    test -f /.dockerenv
}

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    -nd) {
        export NO_DOCKER=y
        shift
    }
    ;;

    -nc|-nocomint) {
        use_comint=n
        shift
    }
    ;;

    *) break;
esac; done

if { ! test "$NO_DOCKER" = y; } && { ! inside-docker-p; }; then
    cterm-docker nlsh "$@"
    # pen sh nvc nlsh "$@"
    exit "$?"
fi

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    -nv) {
        export USE_NVC=y
        shift
    }
    ;;

    *) break;
esac; done

while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
    "") { shift; }; ;;
    -norl) {
        norl=y
        shift
    }
    ;;

    *) break;
esac; done

if ! test "$norl" = "y"; then
    rlwrap "$sn" -norl "$@"
    exit $?
fi

# pf-code-snippet-from-natural-language/2
# pf-nlsh/2

case "$sn" in
    nlsh) { prompt=pf-nlsh/2; } ;;
    nlsc) { prompt=pf-code-snippet-from-natural-language/2; } ;;

    *)
esac

os_or_lang="$@"

test -n "$os_or_lang" || {
    echo "Requires 1 argument: OS or lang" 1>&2
    exit 2
}

echo Enter your commands in natural language.
echo

export USE_CONVERSATION_MODE=y

# rlwrap openai-complete.sh prompts/nlsh-2.prompt "$os_or_lang"

while IFS=$'\n' read -p "${os_or_lang}: " -r nlcommand; do
    if test "$nlcommand" = "!!"; then
        nlcommand="$lastcmd"
        UPDATE=y
    else
        UPDATE=
    fi

    export UPDATE

    pena "$prompt" "${os_or_lang}" "$nlcommand" | jq -r ".[]"
    # pena "$prompt" "${os_or_lang}" "$nlcommand" | jq -r ". | map(length)[]"

    lastcmd="$nlcommand"
done
