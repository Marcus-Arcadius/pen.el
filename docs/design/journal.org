* <2021-10-13 Wed> We need to be able to share the output of prompts for the sake of not divulging private information
For example, listing the real contents of our
current directory.

OK, so we want FAKE inputs a lot of the time,
to avoido divulging information.

Therefore, the prompt format should allow you
to specify fake inputs.

* Old
** Deployment
Use cask to create the emacs package:
https://github.com/cask/cask

** Components
- Fake server
  - https://github.com/shawwn/openai-server

- =openai= vs =chronology=
  - https://github.com/OthersideAI/chronology

** Design decisions
*** =comint= major mode
**** Don't use comint for the playground
Simply make some elisp functions for completing text.
Select the text then use a binding to complete it.
This is the basic function.
It will send a request for more text.
The region selected should not deselect.

*** =openai-python= vs =chronology=
https://github.com/OthersideAI/chronology/

Chronology is a library that enables users of
OpenAI's GPT-3 LM to more easily build complex
language-powered applications.

- =openai= does not have a lot of documentation
- =chronology= appears to be not ready for use and is strictly a python library

**** Use =openai=

*** Stream from API
**** Don't stream for the moment
#+BEGIN_SRC text -n :async :results verbatim code
  Stream
      [#OpenAI API]
      [API setting]
  
      Whether to stream back partial progress.
  
      If set, tokens will be sent as data-only
      server-sent events as they become
      available, with the stream terminated by a
      data: DONE message.
#+END_SRC

*** Setup
**** DISCARD Set the =openai= API key using emacs' =custom=?
   CLOSED: [2021-02-17 Wed 20:17]
#+BEGIN_SRC text -n :async :results verbatim code
  M-x customize-group
#+END_SRC

This is too dodgy. Instead, ask the user to
set the key in the user's environment.

Demonstrate how to make a wrapper script in
order to do this.

** Annotation
Support these common annotation facilities in pen.el:

+ Original source :: http://www.hunter.cuny.edu/rwc/handouts/the-writing-process-1/invention/Annotating-a-Text/

- HIGHLIGHTING/UNDERLINING
  - Most common form of annotating texts.
    - Seriously don't overuse this.
- PARAPHRASE/SUMMARY OF MAIN IDEAS
  - Going beyond locating important ideas to
    being able to capture their meaning through
    paraphrase is a way of solidifying your
    understanding of these ideas.
    
    It’s also excellent preparation for any
    writing you may have to do based on your
    reading.
    
    A series of brief notes in the margins
    beside important ideas gives you a handy
    summary right on the pages of the text
    itself, and if you can take the substance of
    a sentence or paragraph and condense it into
    a few words, you should have little trouble
    clearly demonstrating your understanding of
    the ideas in question in your own writing.
- DESCRIPTIVE OUTLINE
  - Shows the organization of a piece of
    writing, breaking it down to show where
    ideas are introduced and where they are
    developed.
    
    A descriptive outline allows you to see not
    only where the main ideas are but also where
    the details, facts, explanations, and other
    kinds of support for those ideas are
    located.
- COMMENTS/RESPONSES
  - You can use annotation to go beyond
    understanding a text’s meaning and
    organization by noting your
    reactions—agreement/disagreement, questions,
    related personal experience, connection to
    ideas from other texts, class discussions,
    etc.
    
    This is an excellent way to begin
    formulating your own ideas for writing
    assignments based on the text or on any of
    the ideas it contains.

** Full picture
*** Design
+ Completed [ ]
  - [X] Default behaviour of generated functions
    - [X] First argument may be selection
    - [ ]If selection then text is replaced by default
  - [X] Generate funxctions of composed prompts
  - [ ] Generate prompts from interactive keyboard macros
  - [ ] Development workflow
  - [ ] Search workflow
    - Semantic search for =straight.el=
    - Semantic search for =nixos.el=
    - Semantic concordance for =KJV bible=

*** Future features
**** A pipeline for fine-tuning
***** GPT-3
- [[./docs/todo/fine-tuning.org]]
- https://github.com/semiosis/fine-tuning-gpt-3/
**** =imaginary-mode=
- http://github.com/semiosis/pen.el/blob/master/docs/todo/imaginary-mode.org
  - [[./docs/todo/imaginary-mode.org]]
- https://semiosis.github.io/posts/imaginary-programming-with-gpt-3/