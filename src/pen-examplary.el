;; Perspective:
;; Create the language according to speculation and future need.
;; Combine with APIs and LMs according to what they need.

;; TODO It's important to implement single example prompts
;; I can then search for a multi-example prompt

;; TODO examples
;; TODO counterexamples
;; TODO tasks

;; The initial characters of the prompt have more weight than the latter.
;; A 'metaprompt' may be designed which is the initial part of the prompt.
;; It's not a great name as there is no strict part which could be considered.
;; And a metaprompt may be further divided ad infinitum.

;; (defmacro defprompt (inputtype outputtype &rest data)
;;   ""
;;   `(,@data))

(defmacro defprompt (inputtype outputtype &rest data)
  ""
  (let* ((task (plist-get data :task))
         (gen (plist-get data :gen))
         (sh-gen (plist-get data :sh-gen))
         (filter (plist-get data :filter))
         (sh-filter (plist-get data :s-filter))
         (examples (plist-get data :examples)))
    (loop for ex in examples do
          (cond
           ((and (eq 1 (length ex))) body))))

  nil
  ;; (etv (plist-get :external data))
  ;; `(,@data)
  )

;; TODO Start with an input/output prompt

;; https://github.com/pemistahl/grex
(defun grex (in)
  (snc "grex" in))

;; A gen function must take an initial value and a number for how many to generate
(defun examplary-edit-generator (initial n)
  (pen-str2list (snc (concat (cmd "examplary-edit-generator" "shane") "| head -n " (str n)))))

;; If :gen or :filter is a string then it refers to an external shell script
;; If :gen or :filter is a symbol then it refers to a function.

;; :gen (An elisp function or external command to generate input examples)
;; :filter (An elisp function or external command to filter input examples and generate output examples)
;; :task (may also be used as a metaprompt. also used to define a function)

;; Convert lines to regex
(defprompt lines regex
  :task "Convert lines to regex"
  ;; Generate input with this
  ;; :gen "examplary-edit-generator shane"
  :gen 'examplary-edit-generator
  :filter "grex"
  ;; The third argument (if supplied) should be incorrect output (a counterexample).
  ;; If the 2nd argument is left out, it will be generated by the command specified by :external
  :examples '(("example 1\nexample2")
              ("example 2\nexample3" "^example [23]$")
              ("pi4\npi5" "^pi[45]$" "pi4\npi5")))

;; (etv (plist-get (expand-macro '(defprompt lines regex
;;                                  :external "grex"
;;                                  ;; The task may also be used as a metaprompt.
;;                                  :task "Convert lines to regex"
;;                                  :examples '(("example 1\nexample2" "^example [12]$")
;;                                              ("example 2\nexample3" "^example [23]$")
;;                                              ("pi4\npi5" "^pi[45]$"))
;;                                  :counterexamples '())) :external))

;; Only use as many examples as required by the model

(defmodel gpt3
  :n-examples 3)

(provide 'pen-examplary)